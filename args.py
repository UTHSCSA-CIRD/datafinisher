"""
Parsing of command line arguments.
credit: Mike Muller https://stackoverflow.com/a/41322722

No other functionality should be added to this module.
The typically usage is:

>>> from console_args import CONSOLE_ARGS 
"""
import argparse

def _parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("dbfile",nargs='?',help="SQLite file generated by DataBuilder",default='')
    parser.add_argument("-l","--log",help="Log verbose sql",action="store_true")
    parser.add_argument("-c","--cleanup",help="Restore dbfile to its vanilla, data-builder state",action="store_true")
    parser.add_argument("-v","--csvfile",help="File to write output to, in addition to the tables that will get created in the dbfile. By default this is whatever was the name of the dbfile with '.csv' substituted for '.db'",default='OUTFILE')
    #parser.add_argument("-s","--style",help="What style to output the file, currently there are two-- concat which concatenates the code variables and simple which represents code variables as Yes/No, with the nulls represented by No. The default is concat.",default="concat",choices=['concat','simple'])
    parser.add_argument("-d","--datecompress",help="Round all dates to the nearest X days, default is 1",default=1)
    parser.add_argument("-m","--minimumcount",help="The minimum number of non-missing values a column must have in order to not be omitted from the output file (set to -1 disable feature)",default=0)
    parser.add_argument("-g","--suggest",help="The name of a .json file that will override how DataFinisher chooses default rules to apply to each column of data.")
    parser.add_argument("-r","--rules",help="The name of a .json file that will insert additional rules or overwrite existing ones.")
    out = parser.parse_args()
    # to allow an importing function to print the same help
    out.print_help = parser.print_help
    return out

CONSOLE_ARGS =  _parse_arguments()

if CONSOLE_ARGS.datecompress == 'week': CONSOLE_ARGS.datecompress = 7
elif CONSOLE_ARGS.datecompress == 'month': CONSOLE_ARGS.datecompress = 365.25/12
elif CONSOLE_ARGS.datecompress == 'year': CONSOLE_ARGS.datecompress = 365.25
else: pass


# optional: delete function after use to prevent calling from other place
del _parse_arguments