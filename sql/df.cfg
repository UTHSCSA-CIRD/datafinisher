[Settings]

# where to look for rule definitions
# DECISION: keep default df_rules in project root, or hide it in sql subdirectory?
ruledefs = ruledefs.csv
 

create_joinme = 
    create table if not exists df_joinme as
    select distinct patient_num, {0} start_date
    from observation_fact order by patient_num, start_date;
       
create_obsfact =
  create table if not exists df_obsfact as
  select distinct id,patient_num pn,{0} sd
  ,case when cpath like '\i2b2\%' then concept_cd else cpath end concept_cd
  ,instance_num,modifier_cd
  ,case when valtype_cd in ('@','N','') then null else valtype_cd end valtype_cd
  ,case when tval_char in ('@','E','') then null else tval_char end tval_char
  ,nval_num
  ,case when valueflag_cd in ('@','') then null else valueflag_cd end valueflag_cd
  ,quantity_num,units_cd,location_cd,confidence_num
  from observation_fact ob join df_codeid on ccd = concept_cd
  where modifier_cd not in ('Labs|Aggregate:Last','Labs|Aggregate:Median','PROCORDERS:Outpatient','DiagObs:PROBLEM_LIST')
  and concept_cd not like 'DEM|AGEATV:%' 
  and concept_cd not like 'DEM|SEX:%' 
  and concept_cd not like 'DEM|VITAL:%'
  order by id,pn,sd,concept_cd,instance_num,modifier_cd
  
create_dynsql =
  create table if not exists df_dynsql as
  select *,bscode||trim(presuffix) jcode,trim(bscode)||trim(presuffix)||trim(suffix) ccode
  ,trim(colid)||trim(presuffix)||trim(suffix) colname, 9999 valcount, 9999 chunk,'t9999' ttable
  from(
  select distinct cid,colcd bscode,colid,name colname_long
  ,sub_slct_std,sub_payload,sub_frm_std
  ,coalesce(sbwr,'') sbwr,sub_grp_std
  ,coalesce('_'||replace(cpath,'-','_'),'') presuffix,coalesce(suffix,'') suffix
  ,cpath concept_cd,df_rules.rule,grouping,subgrouping,in_use
  from df_rules join df_dtdict on trim(df_rules.rule) = trim(df_dtdict.rule)
  join df_codeid on id = cid 
  where concode = 1 and in_use = 1
  union all
  select distinct cid,colcd bscode,colid,name colname_long
  ,sub_slct_std,sub_payload,sub_frm_std
  ,coalesce(sbwr,'') sbwr,sub_grp_std
  ,coalesce(presuffix,'') presuffix,coalesce(suffix,'') suffix
  ,NULL concept_cd,df_rules.rule,grouping,subgrouping,in_use
  from df_rules join df_dtdict on trim(df_rules.rule) = trim(df_dtdict.rule)
  where concode = 0 and in_use = 1
  ) order by cid,jcode,grouping,subgrouping

chunk_dynsql = update df_dynsql set chunk = {0},ttable = 't'||substr('000'||{0},-3) where jcode in (select * from (select distinct jcode from df_dynsql) limit {1} offset {0})

# in the below, "^(.*):.*$" puts the string we use as the data domain, i.e. everything 
# before the first ':', into the first matched group, which is what the grs custom function
# returns
create_codeid_tmp =
  create table if not exists df_codeid_tmp as
  select distinct concept_cd ccd,id
  ,grs("^(.*):.*$",concept_cd) ddomain
  ,cd.concept_path cpath
  from concept_dimension cd 
  join (select min(id) id,min(concept_path) concept_path 
  from variable 
  where name not like '%old at visit' and name not in ('Living','Deceased','Not recorded','Female','Male','Unknown')
  group by item_key) vr
  on cd.concept_path like vr.concept_path||'%'
  
#create_codeid =
#  create table if not exists df_codeid as
#  select distinct * from df_codeid_tmp

create_codeid =
  create table if not exists df_codeid as
  select distinct cd.* from observation_fact obs left join (select distinct * from df_codeid_tmp) cd 
  on concept_cd = ccd order by id,cpath

maketables =
  select 'create table if not exists '||ttable||' as select patient_num pn,start_date sd,'||group_concat(sel)||' from df_joinme '||group_concat(qry,' ')
  from(
  select sub_slct_std||' '||group_concat(replace(sub_payload,'{ccode}',ccode))||
  ' '||replace(sub_frm_std,'{cid}',cid)||
  ' '||replace(sbwr,'{concept_cd}',coalesce(''''||concept_cd||'''',''))||' '||replace(sub_grp_std,'{jcode}',jcode) qry
  ,group_concat(ccode||' '||colname) sel
  ,cid,jcode,ttable from df_dynsql
  group by jcode,cid,ttable
  order by cid
  ) group by ttable
  
fulloutput2 =
  select 'create table if not exists fulloutput2 as select df_joinme.*,'||group_concat(sel)||
  ' from df_joinme '||group_concat(qry,' ') 
  from (
  select group_concat(colname) sel,' left join '||ttable||' on '||
  ttable||'.pn = patient_num and '||ttable||'.sd=start_date' qry 
  from df_dynsql group by ttable)


# the colname not like '%_info' might not be a great idea, doing this for demo purposes
# and now I have to remove it because it causes errors with the centrally managed column names
# probably need to have a separate param for turning on and off info. Maybe units too
selbin_dynsql = 
  select group_concat(cn) from (
    select 'case when '||colname||' is NULL then ''F'' else ''T'' end '||colname cn,jcode,grouping,subgrouping from df_dynsql where rule in ('diag','code','codemod') -- and colname not like '%_info'
    union all
    select colname cn,jcode,grouping,subgrouping 
    from df_dynsql where rule not in ('diag','code','codemod') -- and colname not like '%_info'
    order by jcode,grouping,subgrouping)

# dynamically generate update statements for df_dtdict for all the distinct criteria in df_rules
dd_criteria = 
   select distinct "update df_dtdict set rule = '"||rule||"' where "||criterion||" and rule = 'UNKNOWN_DATA_ELEMENT'" 
   from df_rules where in_use=1 and criterion is not NULL and criterion != ''
 

