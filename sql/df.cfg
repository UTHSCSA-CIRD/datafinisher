[Settings]

# where to look for rule definitions
# DECISION: keep default df_rules in project root, or hide it in sql subdirectory?
ruledefs = ruledefs.csv
 
# Thoughts on naming stuff...
# For table creation, either standardize on a cr_ prefix for the variable or
# Have a separate section specifically for table creation
# For SQL that returns results, do sel_ or separate section
# For SQL that updates, do up_ or separate section

# Before we start talking about what each table does, we need to define an idea that will get used repeatedly here: variable-id. In the DataBuilder UI, the user drags folder or leaf nodes from the i2b2 concept tree to the "Other Observations" field. What got dragged there is preserved in the .db file within the VARIABLE table. Each is assigned an ID value in that table. Let's call these variable-ids. These IDs allow us to programmatically group concepts from OBSERVATION_FACT instead of blindly and uselessly creating a separate column for each and every distinct concept. At the moment, concepts sharing the same variable-id get grouped into a single main indicator column (on this visit, did the patient have one or more of ANY of these facts) for concepts that are codes (such as diagnoses, allergies, family history, procedures, and orders). Concepts that share the same variable-id and have values (such as vitals and labs) do explode out into as many columns as there are distinct concept codes, but all these columns are adjacent to each other and share the same prefixes (based on their variable-id). BY DESIGN REDUNDANT MEMBERSHIP OF THE SAME CONCEPT IN MULTIPLE VARIABLE-IDs IS PERMITTED.

# TODO: move someplace more appropriate (maybe at creation) the below reasons for each 
# of the following tables' existence:

# df_codeid: a mapping of concept_cd (ccd) to term ID (id) to data domain (ddomain) to a standard code (ICD9 or LOINC) and if there isn't one then a concept path (cpath).

# df_obsfact: modified version of observation fact. Rename to: df_obsfact
# created from OBSERVATION_FACT and DF_CODEID. It's basically a slightly cleaned-up version of CONCEPT_DIMENSION, with non-informative or meaningless entries omitted (including the bogus demographic code entries that are redundant with PATIENT_DIMENSION). An important thing that happens here is that START_DATE gets replaced with JULIAN_DAY(START_DATE) rounded to a user-specified number of days (via the -d argument) and converted back to a date using the RDST() or RDT() function we register as a UDF in SQLite

# df_rules: rule definitions. Rename to: df_rules
# needs a documentation effort all its own, coming soon to a branch near you

# df_dtdict: created by sql/dd.sql out of the df_codeid, variable and df_obsfact tables. df_codeid provides the data domains and counts of distinct CONCEPT_CDs, and df_obsfact provides counts of various of its data fields, both available to be used by the rules in df_rules. df_dtdict contains a ton of information, grouped by which elements were dragged over as one folder to the concepts field in the DataBuilder query interface. These all get the same ID. DDOMAIN comes from df_codeid as per above. CCDs is the number of distinct CONCEPT_CDs for this CID.  MXINSTS, MXFACTS, are currently duplicates of each other (bug). I _believe_ mxinsts represents the maximum number of distinct entries of any variable-id/patient/start-date combination in OBS_DF (gives some idea of how many modifiers or instances of the same class of fact for the same patient on the same visit there are). COLCD is pasted together out of 'v'and a 0-padded CID, COLID is similarly put together but also has a semi-human-readable suffix created by abbreviating the hell out of VARIABLE.NAME, NAME is from there too. CONCEPT_PATH is from VARIABLE.CONCEPT_PATH ... MOD,TVAL_CHAR,VALUEFLAG_CD,UNITS_CD,CONFIDENCE_NUM,QUANTITY_NUM,LOCATION_CD: these are all number of unique values (with NULLs and certain non-informative values excluded) in the corresponding columns of OBS_DF. NVAL_NUM becomes an indicator variable reporting whether ANY of the facts for a given variable-id in OBS_DF have a numeric value in their NVAL_NUM field (otherwise it is NULL in this table). Finally, VALTYPE_CD is a concatenated list of all distinct VALTYPE_CD values for that variable-id in OBS_DF.

# df_dynsql:
# created from RULEDEFS, DATA_DICTIONARY, and DF_CODEID.
# This table is mostly a storage place for snippets of SQL that get concatenated together to make dynamic SQL statements for creating the output (including chunking it into multiple dynamically named tables, whose names are recorded in the TTABLE column by the code in chunkdf_dynsql). The reason for chunking is that there is a limit to how many joins can be done in one SQLite statement. So, we perform a safe number of joins creating several tables named tXXX, and then we join those tables. This is a concise and robust alternative to looping through all this shit within Python.

# datafinisher_log: persistent log (deliberately no df_ in the name)

# df_vars: persistent variable storage (stores only one variable right now)

# df_joinme: 
# All unique combinations of PATIENT_NUM and START_DATE with the latter converted using JULIAN_DAY() and rounded to a user-specified number of days (via the -d argument) and converted back to a date using the RDST() or RDT() function we register as a UDF in SQLite. The point of this table, and the reason it's named df_joinme is that it represents an OR of every distinct patient-visit in the data, to which everything can later be joined without errors.

# fulloutput2: rename to df_preoutput
# Created from SCAFFOLD, the dynamic SQL generated using DD2, and the tXXX tables (self joined on a whole lot of concepts from OBS_DF) also generated using DD2
# This is the results of joining the tXXX tables as described in the description of df_dynsql above 

# fulloutput: rename to df_fulloutput
# Created from SCAFFOLD,PATIENT_DIMENSION,the dynamic SQL generated using DD2, and FULLOUTPUT2
# This is the actual final result from df.py with the default -s option. If -s is set to 'simple' the result will be from a view of the FULLOUTPUT table that replaces concatenated codes are replaced with True/False values. This is basically FULLOUTPUT2 but with data from PATIENT_DIMENSION joined on, and sorted by PATIENT_NUM and START_DATE (that have in a previous step passed through RDST())


# ...then rename them so they all have a df_ prefix and have short
# but descriptive names

create_joinme = 
    create table if not exists df_joinme as
    select distinct patient_num, {0} start_date
    from observation_fact order by patient_num, start_date;
       
create_obsfact =
  create table if not exists df_obsfact as
  select distinct id,patient_num pn,{0} sd
  ,case when cpath like '\i2b2\%' then concept_cd else cpath end concept_cd
  ,instance_num,modifier_cd
  ,case when valtype_cd in ('@','N','') then null else valtype_cd end valtype_cd
  ,case when tval_char in ('@','E','') then null else tval_char end tval_char
  ,nval_num
  ,case when valueflag_cd in ('@','') then null else valueflag_cd end valueflag_cd
  ,quantity_num,units_cd,location_cd,confidence_num
  from observation_fact ob join df_codeid on ccd = concept_cd
  where modifier_cd not in ('Labs|Aggregate:Last','Labs|Aggregate:Median','PROCORDERS:Outpatient','DiagObs:PROBLEM_LIST')
  and concept_cd not like 'DEM|AGEATV:%' 
  and concept_cd not like 'DEM|SEX:%' 
  and concept_cd not like 'DEM|VITAL:%'
  order by id,pn,sd,concept_cd,instance_num,modifier_cd
  
create_dynsql =
  create table if not exists df_dynsql as
  select *,bscode||presuffix jcode,bscode||presuffix||suffix ccode
  ,colid||presuffix||suffix colname,9999 chunk,'t9999' ttable
  from(
  select distinct cid,colcd bscode,colid,name colname_long
  ,sub_slct_std,sub_payload,sub_frm_std
  ,coalesce(sbwr,'') sbwr,sub_grp_std
  ,coalesce('_'||replace(cpath,'-','_'),'') presuffix,coalesce(suffix,'') suffix
  ,cpath concept_cd,df_rules.rule,grouping,subgrouping,in_use
  from df_rules join df_dtdict on df_rules.rule = df_dtdict.rule
  join df_codeid on id = cid 
  where concode = 1 and in_use = 1
  union all
  select distinct cid,colcd bscode,colid,name colname_long
  ,sub_slct_std,sub_payload,sub_frm_std
  ,coalesce(sbwr,'') sbwr,sub_grp_std
  ,coalesce(presuffix,'') presuffix,coalesce(suffix,'') suffix
  ,NULL concept_cd,df_rules.rule,grouping,subgrouping,in_use
  from df_rules join df_dtdict on df_rules.rule = df_dtdict.rule
  where concode = 0 and in_use = 1
  ) order by cid,jcode,grouping,subgrouping

chunk_dynsql = update df_dynsql set chunk = {0},ttable = 't'||substr('000'||{0},-3) where jcode in (select * from (select distinct jcode from df_dynsql) limit {1} offset {0})

# in the below, "^(.*):.*$" puts the string we use as the data domain, i.e. everything 
# before the first ':', into the first matched group, which is what the grs custom function
# returns
create_codeid_tmp =
  create table if not exists df_codeid_tmp as
  select distinct concept_cd ccd,id
  ,grs("^(.*):.*$",concept_cd) ddomain
  ,cd.concept_path cpath
  from concept_dimension cd 
  join (select min(id) id,min(concept_path) concept_path 
  from variable 
  where name not like '%old at visit' and name not in ('Living','Deceased','Not recorded','Female','Male','Unknown')
  group by item_key) vr
  on cd.concept_path like vr.concept_path||'%'
  
create_codeid =
  create table if not exists df_codeid as
  select distinct * from df_codeid_tmp

maketables =
  select 'create table if not exists '||ttable||' as select patient_num pn,start_date sd,'||group_concat(sel)||' from df_joinme '||group_concat(qry,' ')
  from(
  select sub_slct_std||' '||group_concat(replace(sub_payload,'{ccode}',ccode))||
  ' '||replace(sub_frm_std,'{cid}',cid)||
  ' '||replace(sbwr,'{concept_cd}',coalesce(''''||concept_cd||'''',''))||' '||replace(sub_grp_std,'{jcode}',jcode) qry
  ,group_concat(ccode||' '||colname) sel
  ,cid,jcode,ttable from df_dynsql
  group by jcode,cid,ttable
  order by cid
  ) group by ttable
  
fulloutput2 =
  select 'create table if not exists fulloutput2 as select df_joinme.*,'||group_concat(sel)||
  ' from df_joinme '||group_concat(qry,' ') 
  from (
  select group_concat(colname) sel,' left join '||ttable||' on '||
  ttable||'.pn = patient_num and '||ttable||'.sd=start_date' qry 
  from df_dynsql group by ttable)


# the colname not like '%_info' might not be a great idea, doing this for demo purposes
selbin_dynsql = 
  select group_concat(cn) from (
    select 'case when '||colname||' is NULL then ''F'' else ''T'' end '||colname cn,jcode,grouping,subgrouping from df_dynsql where rule in ('diag','code','codemod') and colname not like '%_info'
    union all
    select colname cn,jcode,grouping,subgrouping 
    from df_dynsql where rule not in ('diag','code','codemod') and colname not like '%_info'
    order by jcode,grouping,subgrouping)

# dynamically generate update statements for df_dtdict for all the distinct criteria in df_rules
dd_criteria = 
   select distinct "update df_dtdict set rule = '"||rule||"' where "||criterion||" and rule = 'UNKNOWN_DATA_ELEMENT'" 
   from df_rules where in_use=1 and criterion is not NULL and criterion != ''
 

#concept code map not included because each line has a separate SQL statement
#do not want to create variables if code is not more than 1 line

# dead-code in remaining sections kept temporarily in case it is useful in writing certain 
# anticipated rules after those rules are added to ruledefs.csv, these can be deleted


# below settings are not currently linked into df.py but are still valid settings for
# queries that are still needed

# obs_labs_v = 
#   create view obs_labs as
#   select distinct patient_num pn,"""+rdst(dtcp)+""" sd,id,cpath,avg(nval_num) nval_num
#   ,group_concat(distinct units_cd) units
#   ,case when coalesce(group_concat(distinct tval_char),'E')='E' then '' else group_concat(distinct tval_char) end ||
#   case when coalesce(group_concat(distinct valueflag_cd),'@')='@' then '' else ' flag:'||
#   group_concat(distinct valueflag_cd) end || case when count(*) > 1 then ' cnt:'||count(*) else '' end info
#   from observation_fact join df_codeid on concept_cd = ccd
#   where modifier_cd = '@' and ddomain = 'LOINC' or ddomain like '%COMPONENT_ID'
#   group by patient_num,"""+rdst(dtcp)+""",cpath,id
# 

#
# dd_diag = 
#   update df_dtdict set rule = 'diag' where ddomain like '%ICD9%DX_ID%' or ddomain like '%DX_ID%ICD9%'
#   and rule = 'UNKNOWN_DATA_ELEMENT'
# 	
# dd_loinc = 
#   update df_dtdict set rule = 'loinc' where ddomain like '%LOINC%COMPONENT_ID%' 
#   or ddomain like '%COMPONENT_ID%LOINC%'
#   and rule = 'UNKNOWN_DATA_ELEMENT'
# 
# dd_code_only = 
#   update df_dtdict set rule = 'code' where
#   coalesce(mod,tval_char,valueflag_cd,units_cd,confidence_num,quantity_num,location_cd,valtype_cd,nval_num,-1) = -1
#   and rule = 'UNKNOWN_DATA_ELEMENT'
# 
# dd_codemod_only = 
#   update df_dtdict set rule = 'codemod' where
#   coalesce(tval_char,valueflag_cd,units_cd,confidence_num,quantity_num,location_cd,valtype_cd,nval_num,-1) = -1
#   and mod is not null and rule = 'UNKNOWN_DATA_ELEMENT'
#   
# dd_vvitals =
#   update df_dtdict set rule = 'vitals' where 
#   ddomain like '%PAT_ENC:%' and ddomain not like '%PAT_ENC::LMP%'
#   and rule = 'UNKNOWN_DATA_ELEMENT'
# 
# dd_vvital = 
#   update df_dtdict set rule = 'vitals' where ddomain like '%PAT_ENC%' 
#   and ddomain not like '%PAT_ENC:LMP%'
#   and rule = 'UNKNOWN_DATA_ELEMENT'

# codef_sel = "select group_concat(colid) from df_dtdict where rule = 'code'"
# codef_jrep = 
#   select ' left join (select patient_num,start_date sd
#   ,replace(group_concat(distinct concept_cd),'','',''; '') '||colid||' from df_codeid 
#   join obs_noins on ccd = concept_cd where id = '||cid||' group by patient_num
#   ,start_date order by patient_num,start_date) '||colid||' 
#   on '||colid||'.patient_num = df_joinme.patient_num 
#   and '||colid||'.sd = df_joinme.start_date' from df_dtdict where rule = 'code'
# 

#kept dynamic SQL for ONEPERDAY because first part is more complicated

# loinc_sel = 
#       select replace(group_concat(distinct colid||'_'||cpath||
#       '_value,'||colid||'_'||cpath||'_units,'||colid||'_'||cpath||'_info'),'-','_')
#       from obs_labs join df_dtdict on cid = id
#       where rule = 'loinc' order by cid
# 
# loinc_jrep = 
#   select distinct
#     replace('left join (select distinct pn,sd,cpath,nval_num '||colid||'_'||cpath||'_value'||
#     ',units '||colid||'_'||cpath||'_units'||
#     ',info '||colid||'_'||cpath||'_info'||
#     ' from obs_labs where id='||cid||
#     ' and cpath='''||cpath||''') '||colid||'_'||cpath||
#     ' on '||colid||'_'||cpath||'.pn = df_joinme.patient_num and '||
#     colid||'_'||cpath||'.sd = df_joinme.start_date','-','_')
#     from obs_labs join df_dtdict on cid = id
#     where rule = 'loinc' order by cid
# 
