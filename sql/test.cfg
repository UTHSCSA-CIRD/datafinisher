# we will be using the subsection custom method, so for now there is no [DEFAULT]
# section until we have some option we want to always be explicitly overriden,
# bypassing inheritance from the parent section <!--Won't the system default to using the "unknown" set. Isn't that the same as a default?-->

# any section named [foo<!--foo is non-descriptive, it's recommended to use a real example like medication_info-->_bar] will attempt to inherit from a section named [foo]
# and will add <!-- a second column containing the elements listed in the _bar rule, right? -->a `suffix` option that will be equal to _bar
# if no [foo] section exists, it will inherit directly from [unknown]<!-- this is acting as a default, so the top paragraph can be removed, right? -->
# [foo] will also inherit from [unknown] in either case

# Do not modify this section. 
[unknown]
<!--I'll look into how we can rename these variables. I don't think they will make any sense to the end user. -->
sub_slct_std = SELPATIENTDATE
<!-- I'll look into parsing this out, the user won't know what xgr stands for and it's not explained in the comments or readme -->
sub_payload = xgr(concept_cd,modifier_cd,instance_num,valtype_cd,tval_char,nval_num,valueflag_cd,quantity_num,units_cd,location_cd,confidence_num) {ccode} <!-- ccode? -->
sbwr= <!-- Will look into what represents a null config option.-->
sub_frm_std = from df_obsfact where id = {cid} <!-- from the end user perspective: What is df_obsfact and {cid}? They wouldn't know what to do with this without reading the code.-->
presuffix=
suffix=
sub_grp_std = group by pn,sd)<!-- End user will think: where is the other side of this parenthesis?-->{jcode} on {jcode}.pn = patient_num and {jcode}.sd = start_date <!-- jcode? This segment requires the user to know the sql statements datafinisher is creating in order to edit it. -->
# If concode = 1, that means the data element is broken out 
# into individual concept codes (e.g. labs)<!-- Within the same column, in that json format? -->
concode = 0
rule = UNKNOWN_DATA_ELEMENT <!-- does the order of the config options matter? if not the rule should probably move up to the top -->
grouping = 1 <!-- What are the options here? What does 1 mean? -->
subgrouping = 9 <!-- same as above -->
in_use = 1
criterion =

# Modify the sections below to configure datafinisher for your site
# You may temporarily disable a rule by adding: "in_use = 0" to its configuration options. 

# It is recommended that you NOT modify this section as these rules should be applicable across most I2B2 sites.

[codemod]
sub_payload = dgr(concept_cd,modifier_cd) {ccode} <!-- User won't know what dgr means. -->
rule = codemod
subgrouping = 1
criterion =  coalesce(tval_char,valueflag_cd,units_cd,confidence_num,quantity_num,location_cd,valtype_cd,nval_num,-1) = -1 and mod is not null <!-- same as dgr-->

[codemod_info]
sub_payload = igr <!-- same as dgr-->(NULL,NULL,instance_num,valtype_cd,tval_char,NULL,valueflag_cd,quantity_num,units_cd,location_cd,confidence_num) {ccode}
subgrouping = 2

[code]
sub_payload = dgr(concept_cd,modifier_cd) {ccode} <!-- this is the same dgr option from above, is dgr ever used with something other than concept_cd, modifier_cd) {ccode} ? -->
rule = code
criterion = coalesce(mod,tval_char,valueflag_cd,units_cd,confidence_num,quantity_num,location_cd,valtype_cd,nval_num,-1) = -1 

# It is recommended that you modify this section to adjust datafinisher for your site. 

[diag]
sub_payload = dgr(concept_cd,modifier_cd) {ccode}
sbwr = and modifier_cd not in ('DiagObs:MEDICAL_HX','PROBLEM_STATUS_C:2','PROBLEM_STATUS_C:3')
rule = diag
criterion = ddomain like '%ICD9%DX_ID%' or ddomain like '%DX_ID%ICD9%' <!-- ddomain? -->

[diag_inactive]
sbwr =  and modifier_cd in ('DiagObs:MEDICAL_HX','PROBLEM_STATUS_C:2','PROBLEM_STATUS_C:3')
grouping = 2

[ethnicity]
sub_slct_std = SELPATIENT <!-- it looks like this could code for sub_grp_std...?-->
sub_payload = concept_cd {ccode}
sub_grp_std = group by pn) {jcode} on {jcode}.pn = patient_num
rule = ethnicity
subgrouping = 1
criterion = ddomain like '%DEM|ETHNICITY%' 


[loinc]
sub_slct_std = SELDISTPATIENTDATE
sub_payload = avg(nval_num) {ccode}
sbwr = and concept_cd = {concept_cd}
presuffix = {concept_cd}
# we explicitly set a suffix here so that this sub-rule can still be the template 
# for loinc_unit and loinc_info
suffix = _num
concode = 1
rule = loinc
subgrouping = 1
criterion = ddomain like '%LOINC%COMPONENT_ID%' or ddomain like '%COMPONENT_ID%LOINC%' 

[loinc_unit]
sub_payload = group_concat(distinct lower(units_cd)) {ccode}
subgrouping = 2

[loinc_info]
sub_payload = igr(NULL,NULL,instance_num,valtype_cd,tval_char,NULL,valueflag_cd,quantity_num,NULL,location_cd,confidence_num) {ccode}
subgrouping = 3

[vitals]
sub_slct_std = SELDISTPATIENTDATE
sub_payload = avg(nval_num) {ccode}
# as with loinc, we explicitly set a suffix here so that this sub-rule can still 
# be the template for vitals_info
suffix = _num
rule = vitals
subgrouping = 1
criterion = ddomain like '%PAT_ENC%' and ddomain not like '%PAT_ENC:LMP%'

[vitals_info]
sub_payload = igr(NULL,NULL,instance_num,valtype_cd,tval_char,NULL,valueflag_cd,quantity_num,NULL,location_cd,confidence_num) {ccode}
subgrouping = 2

<!-- assuming from the test data that this section was for testing the config file...? Removed.-->