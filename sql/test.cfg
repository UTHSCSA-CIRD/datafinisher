# we will be using the subsection custom method, so for now there is no [DEFAULT]
# section until we have some option we want to always be explicitly overriden,
# bypassing inheritance from the parent section

# any section named [foo_bar] will attempt to inherit from a section named [foo]
# and will add (in memory) a `suffix` option that will be equal to _bar
# if no [foo] section exists, it will inherit directly from [unknown]
# [foo] will also inherit from [unknown] in either case

# do not modify this section if your are a deployer of this software 
# rather than a developer
[unknown]
sub_slct_std = left join (select pn,sd,
sub_payload = xgr(concept_cd,modifier_cd,instance_num,valtype_cd,tval_char,nval_num,valueflag_cd,quantity_num,units_cd,location_cd,confidence_num) {ccode}
sbwr=
sub_frm_std = from df_obsfact where id = {cid}
presuffix=
suffix=
sub_grp_std = group by pn,sd) {jcode} on {jcode}.pn = patient_num and {jcode}.sd = start_date
# if concode = 1, that means the data element is broken out 
# into individual concept codes (e.g. labs)
concode = 0
rule = UNKNOWN_DATA_ELEMENT
grouping = 1
subgrouping = 9
in_use = 1
criterion =


# modifiable sections below, but suggest leaving the codemod and code ones alone
# below, set in_use = 0 to disable that method without having to comment it out

[diag]
sub_payload = dgr(concept_cd,modifier_cd) {ccode}
sbwr = and modifier_cd not in ('DiagObs:MEDICAL_HX','PROBLEM_STATUS_C:2','PROBLEM_STATUS_C:3')
rule = diag
criterion = ddomain like '%ICD9%DX_ID%' or ddomain like '%DX_ID%ICD9%' 

[diag_inactive]
sbwr =  and modifier_cd in ('DiagObs:MEDICAL_HX','PROBLEM_STATUS_C:2','PROBLEM_STATUS_C:3')
grouping = 2

[ethnicity]
sub_slct_std = left join (select pn, 
sub_payload = concept_cd {ccode}
sub_grp_std = group by pn) {jcode} on {jcode}.pn = patient_num
rule = ethnicity
subgrouping = 1
criterion = ddomain like '%DEM|ETHNICITY%' 

[codemod]
sub_payload = dgr(concept_cd,modifier_cd) {ccode}
rule = codemod
subgrouping = 1
criterion =  coalesce(tval_char,valueflag_cd,units_cd,confidence_num,quantity_num,location_cd,valtype_cd,nval_num,-1) = -1 and mod is not null 

[codemod_info]
sub_payload = igr(NULL,NULL,instance_num,valtype_cd,tval_char,NULL,valueflag_cd,quantity_num,units_cd,location_cd,confidence_num) {ccode}
subgrouping = 2

[code]
sub_payload = dgr(concept_cd,modifier_cd) {ccode}
rule = code
criterion = coalesce(mod,tval_char,valueflag_cd,units_cd,confidence_num,quantity_num,location_cd,valtype_cd,nval_num,-1) = -1 

[loinc]
sub_slct_std = left join (select distinct pn,sd, 
sub_payload = avg(nval_num) {ccode}
sbwr = and concept_cd = {concept_cd}
presuffix = {concept_cd}
# we explicitly set a suffix here so that this sub-rule can still be the template 
# for loinc_unit and loinc_info
suffix = _num
concode = 1
rule = loinc
subgrouping = 1
criterion = ddomain like '%LOINC%COMPONENT_ID%' or ddomain like '%COMPONENT_ID%LOINC%' 

[loinc_unit]
sub_payload = group_concat(distinct lower(units_cd)) {ccode}
subgrouping = 2

[loinc_info]
sub_payload = igr(NULL,NULL,instance_num,valtype_cd,tval_char,NULL,valueflag_cd,quantity_num,NULL,location_cd,confidence_num) {ccode}
subgrouping = 3

[vitals]
sub_slct_std = left join (select distinct pn,sd, 
sub_payload = avg(nval_num) {ccode}
# as with loinc, we explicitly set a suffix here so that this sub-rule can still 
# be the template for vitals_info
suffix = _num
rule = vitals
subgrouping = 1
criterion = ddomain like '%PAT_ENC%' and ddomain not like '%PAT_ENC:LMP%'

[vitals_info]
sub_payload = igr(NULL,NULL,instance_num,valtype_cd,tval_char,NULL,valueflag_cd,quantity_num,NULL,location_cd,confidence_num) {ccode}
subgrouping = 2

[foo]
# to prevent df.py from trying to interpret section as part of the rules
in_use = -1
optA = simple value
# substitute in value from bar section
optB = ${bar:optX}
# substitute in value from same section
optC = the zebra returns a ${foo:optA}
# substitute value from subsection (shouldn't make a difference)
optD = ${foo_subfoo:optF} with the gazelles

[foo_subfoo]
in_use = -1
# valid but useless... will return a literal ${foo:optD}
optE = ${foo_subfoo:optE}
optF = the water buffalo likes to cuddle

[bar]
in_use = -1
optX = another simple value
# multiple substitution, some of it several levels deep (but less than 3)
optY = the giraffe also returns a ${foo:optA} and ${foo:optB} and then ${bar:optX}
# cannot combine shortcuts with other stuff, has to be by itself
optZ = SELPATIENT
# returns 'the zebra returns a simple value'
#optZZ = BBB

